// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-kysely"
  output   = "../src/db"
  fileName = "types.ts"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model user {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  verified    Int       @default(0)
  created_at  String
  updated_at  String? 
  Profile     profile?
}

model profile {
  id                        Int                  @id @default(autoincrement())
  user_id                   Int                  @unique
  user                      user                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  username                  String               @unique
  first_name                String? 
  last_name                 String?
  location                  String?           
  date_of_birth             String?
  avatar                    image?               @relation(fields: [avatar_url], references: [url], onDelete: SetNull, onUpdate: Cascade)
  avatar_url                String?
  organizer                 event[]              @relation("organizer")            
  mvp                       event[]              @relation("mvp")            
  best_striker              event[]              @relation("best_striker")            
  adder                     profile_on_profile[] @relation("adder")
  friend                    profile_on_profile[] @relation("added")
  rater_foot                skill_foot[]          @relation("rater_foot")
  reviewee_foot             skill_foot[]          @relation("reviewee_foot")
  profile_on_event          profile_on_event[]
  mvp_pool_ratee            mvp_poll[]            @relation("ratee_mvp")
  mvp_pool_rater            mvp_poll[]            @relation("rater_mvp")
  best_striker_pool_ratee   best_striker_poll[]   @relation("ratee_best_striker")
  best_striker_pool_rater   best_striker_poll[]   @relation("rater_best_striker")
}

model profile_on_profile {
  // id          Int       @id @default(autoincrement())
  adder_id     Int
  adder        profile   @relation("adder", fields: [adder_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  friend_id    Int
  friend       profile   @relation("added", fields: [friend_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status       status?   @relation(fields: [status_name], references: [name], onDelete: SetNull, onUpdate: Cascade)
  status_name  String?
  created_at   String
  updated_at   String?

  @@id([adder_id, friend_id])
}

model event {
  id                    Int                @id @default(autoincrement())
  date                  String
  duration              Int
  location              String
  required_participants Int
  nb_teams              Int                 @default(2)
  organizer_id          Int
  organizer             profile             @relation("organizer", fields: [organizer_id], references: [id], onDelete: NoAction, onUpdate: Cascade)
  status_name           String
  status                status              @relation(fields: [status_name], references: [name], onDelete: NoAction, onUpdate: Cascade)
  created_at            String           
  updated_at            String?
  profile_on_event      profile_on_event[]
  score                 score[]
  mvp_id                Int? 
  mvp                   profile?             @relation("mvp" , fields: [mvp_id], references: [id], onDelete: NoAction, onUpdate: Cascade)
  best_striker_id       Int?
  best_striker          profile?             @relation("best_striker" ,fields : [best_striker_id], references: [id], onDelete: NoAction, onUpdate: Cascade)
  mvp_poll              mvp_poll[]
  best_striker_poll     best_striker_poll[]
  skills                skill_foot[]
}

model score {
  id              Int       @id @default(autoincrement())
  score_team_1    Int
  score_team_2    Int
  event_id        Int
  event           event     @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at      String  
  updated_at      String?
}

model profile_on_event {
  id            Int         @id @default(autoincrement())
  profile_id    Int
  profile       profile     @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  event_id      Int
  event         event       @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  team          Int?
  status_name   String
  status        status      @relation(fields: [status_name], references: [name], onDelete: NoAction, onUpdate: Cascade)
  created_at    String
  updated_at    String?
}

model skill_foot {
  id          Int       @id @default(autoincrement())
  pace        Int
  shooting    Int
  passing     Int
  dribbling   Int
  defending   Int
  created_at  String
  updated_at  String?
  rater_id    Int
  rater       profile   @relation("rater_foot", fields: [rater_id], references: [id])
  reviewee_id Int
  reviewee    profile   @relation("reviewee_foot", fields: [reviewee_id], references: [id])
  event_id    Int?      
  event       event?     @relation(fields: [event_id], references: [id])

}

model sport {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  created_at  String     
  updated_at  String?    
}

model status {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  created_at         String
  updated_at         String?
  event              event[]
  profile_on_profile profile_on_profile[]
  profile_on_event   profile_on_event[]
}

model image {
  id          Int       @id @default(autoincrement())
  url         String    @unique
  key         String?   @unique
  size        Int?
  created_at  String
  updated_at  String?
  profile     profile[]
}

model mvp_poll {
  event_id    Int
  event       event     @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profile_id  Int
  profile     profile   @relation("ratee_mvp",fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rater_id    Int
  rater       profile   @relation("rater_mvp",fields: [rater_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at  String
  updated_at  String?
  @@id([event_id, rater_id])

}

model best_striker_poll {
  event_id    Int
  event       event     @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profile_id  Int
  profile     profile   @relation("ratee_best_striker",fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rater_id    Int
  rater       profile   @relation("rater_best_striker",fields: [rater_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at  String
  updated_at  String?

  @@id([event_id, rater_id])
}
